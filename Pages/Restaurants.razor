@page "/restaurants"
@inject HttpClient Http

<h1 class="text-center text-primary">Restaurant Setting</h1>
<hr>

@if(RestaurantList == null){
    <div class="full d-flex align-items-center justify-content-center">
        <div class="d-flex flex-column align-items-center">
            <div class="spinner-border text-primary"></div>
            <div>Loading data ...</div>
        </div>
    </div>
}
else {
    <table class="table table-responsive">
        <tr>
            <th>NÃ¡zev</th>
            <th class="d-none d-sm-block">Url</th>
            <th class="d-none d-sm-block">Emoji</th>
            <th class="d-none d-sm-block">Id</th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var restaurant in RestaurantList)
        {
            <tr>
                <td class="d-none d-sm-block"><input type="text" class="form-control" @bind="restaurant.Name" disabled="true" /> </td>
                <td class="d-none d-sm-block"><input type="text" class="form-control" @bind="restaurant.Url" disabled="true" /> </td>
                <td class="d-none d-sm-block"><input type="text" class="form-control" @bind="restaurant.Emoji" disabled="true" /> </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => Edit(restaurant)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(restaurant)">Delete</button>
                </td>
            </tr>
        }
    </table>
    <div class="text-center">
        <button class="btn btn-primary" @onclick="Add">Add New</button>
    </div>

    <div class="hover">
        <button class="btn btn-primary btn-refresh" @onclick="Refresh">
            <span class="oi oi-loop-circular"></span>
        </button>
    </div>
}


<Modal @ref="ConfirmModal"></Modal>
<MessageBox @ref="MessageBox"/>
<RestaurantModal @ref="EditModal" MessageBox="MessageBox"></RestaurantModal>

@code {
    MessageBox MessageBox;
    RestaurantModal EditModal;
    Modal ConfirmModal;
    Models.Restaurant[] RestaurantList { get; set; }

    protected override async Task OnInitializedAsync(){
        await Refresh();
    }

    protected async Task Refresh(){
        RestaurantList = await Http.GetJsonAsync<Models.Restaurant[]>("https://lunchagent.azurewebsites.net/api/restaurant/setting"); 
        StateHasChanged();
        MessageBox.ShowMessage("Restaurants loaded!");
    }

    protected async Task Edit(Models.Restaurant restaurant){
        await EditModal.Prompt(restaurant);
    }

    protected async Task Delete(Models.Restaurant restaurant){
        await ConfirmModal.Prompt($"Are you sure you want to delete '{restaurant.Name}'");

        if(ConfirmModal.Value){
            await Http.DeleteAsync("https://lunchagent.azurewebsites.net/api/restaurant/restaurant/" + restaurant.Id);
            await Refresh();
            MessageBox.ShowMessage($"Restaurant '{restaurant.Name}' Deleted!");
        }
    }

    protected async Task Add(){
        await EditModal.Prompt(new Models.Restaurant());
        await Refresh();
    }
}